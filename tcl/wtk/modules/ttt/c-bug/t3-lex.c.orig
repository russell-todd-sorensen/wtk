#line 2 "t3-lex.c"

#line 4 "t3-lex.c"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

/* %not-for-header */
/* %if-c-only */
/* %if-not-reentrant */

/* %endif */
/* %endif */
/* %ok-for-header */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* %if-c++-only */
/* %endif */

/* %if-c-only */

/* %endif */

/* %if-c-only */

/* %endif */

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
/* %if-c-only */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>
/* %endif */

/* %if-tables-serialization */
/* %endif */
/* end standard C headers. */

/* %if-c-or-c++ */
/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* %endif */

/* begin standard C++ headers. */
/* %if-c++-only */
/* %endif */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* %not-for-header */
/* Returned upon end-of-file. */
#define YY_NULL 0
/* %ok-for-header */

/* %not-for-header */
/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))
/* %ok-for-header */

/* %if-reentrant */
/* %endif */

/* %if-not-reentrant */

/* %endif */

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

/* %if-not-reentrant */
extern int yyleng;
/* %endif */

/* %if-c-only */
/* %if-not-reentrant */
extern FILE *yyin, *yyout;
/* %endif */
/* %endif */

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
/* %if-c-only */
	FILE *yy_input_file;
/* %endif */

/* %if-c++-only */
/* %endif */

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */
/* %if-not-reentrant */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = NULL; /**< Stack as an array. */
/* %endif */
/* %ok-for-header */

/* %endif */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* %if-c-only Standard (non-C++) definition */

/* %if-not-reentrant */
/* %not-for-header */
/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = NULL;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;
/* %ok-for-header */

/* %endif */

void yyrestart ( FILE *input_file  );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size  );
void yy_delete_buffer ( YY_BUFFER_STATE b  );
void yy_flush_buffer ( YY_BUFFER_STATE b  );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state ( void );

static void yyensure_buffer_stack ( void );
static void yy_load_buffer_state ( void );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file  );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size  );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len  );

/* %endif */

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* %% [1.0] yytext/yyin/yyout/yy_state_type/yylineno etc. def's & init go here */
/* Begin user sect3 */

#define yywrap() (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP

#define FLEX_DEBUG
typedef flex_uint8_t YY_CHAR;

FILE *yyin = NULL, *yyout = NULL;

typedef int yy_state_type;

extern int yylineno;
int yylineno = 1;

extern char yytext[];

/* %% [1.5] DFA */

/* %if-c-only Standard (non-C++) definition */

static yy_state_type yy_get_previous_state ( void );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  );
static int yy_get_next_buffer ( void );
static void yynoreturn yy_fatal_error ( const char* msg  );

/* %endif */

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
/* %% [2.0] code to fiddle yytext and yyleng for yymore() goes here \ */\
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
/* %% [3.0] code to copy yytext_ptr to yytext[] goes here, if %array \ */\
	if ( yyleng >= YYLMAX ) \
		YY_FATAL_ERROR( "token too large, exceeds YYLMAX" ); \
	yy_flex_strncpy( yytext, (yytext_ptr), yyleng + 1 ); \
	(yy_c_buf_p) = yy_cp;
/* %% [4.0] data tables for the DFA and the user's section 1 definitions go here */
#define YY_NUM_RULES 115
#define YY_END_OF_BUFFER 116
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_acclist[186] =
    {   0,
       96,   96,  116,  114,  115,  114,  115,  114,  115,  114,
      115,  109,  115,  108,  115,  106,  115,  110,  115,  109,
      115,  115,  107,  115,  115,  113,  115,  111,  115,   97,
      115,   96,  115,  115,  103,  104,  109,  106,  104,  109,
      112,  107,   96,  103,  103,  105,  112,  103,  105,    7,
        5,    3,   24,  103,   10,   67,   66,    3,   10,   49,
        1,   13,   90,   88,   11,   76,   82,   33,   47,   63,
       57,    3,   94,   99,   10,   64,   78,    8,   74,    1,
       20,   12,   70,   92,  101,   99,   64,  102,   84,   86,
       80,    1,    6,   16,   30,   37,   18,   22,   68,   93,

       99,   64,  102,    8,    4,    2,16437,   48,   14,   91,
       15,   89,   77,   83,   26,   28,   34,   35,   39,   46,
       58,   98,   95,  100,   25,  102,   79,   75,    2,    9,
     8245,16439,   72,   41,   44,   27,   71,   65,   98,  100,
       54,   25,   85,   87,    2,   81, 8247,   17,   31,   38,
       61,   19,   23,   69,   98,  100,   54,   56,   25,   62,
        9,16434,16434,   52,   21,   29,   32,   36,   40,   45,
       54,   56,   62, 8242,   73,   42,   43,   56,   62,16435,
     8243,   59,   60,   60,   60
    } ;

static const flex_int16_t yy_accept[619] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    2,    3,    4,
        6,    8,   10,   12,   14,   16,   18,   20,   22,   23,
       25,   26,   28,   30,   32,   34,   35,   35,   36,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       38,   39,   41,   42,   43,   44,   44,   44,   44,   44,
       44,   44,   45,   47,   47,   47,   47,   47,   47,   47,
       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,
       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,
       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,

       47,   47,   47,   47,   47,   47,   48,   48,   48,   48,
       48,   50,   50,   50,   50,   50,   50,   50,   50,   50,
       50,   50,   50,   50,   50,   50,   50,   50,   50,   50,
       50,   50,   50,   50,   50,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       52,   52,   53,   54,   54,   54,   54,   55,   55,   55,
       55,   55,   55,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   57,   57,   57,   57,   57,   57,   57,   57,

       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   58,   58,   58,   58,   58,
       58,   58,   59,   59,   59,   59,   59,   59,   59,   59,
       60,   60,   60,   60,   60,   60,   60,   60,   60,   60,
       60,   60,   61,   61,   61,   61,   62,   62,   62,   63,
       63,   64,   64,   64,   64,   65,   65,   65,   66,   66,
       67,   67,   68,   68,   68,   68,   68,   68,   69,   69,
       69,   69,   69,   69,   69,   69,   70,   70,   70,   71,
       71,   71,   72,   72,   72,   72,   72,   72,   72,   72,
       73,   73,   74,   74,   74,   75,   75,   75,   75,   76,

       76,   76,   77,   77,   77,   78,   78,   78,   78,   79,
       80,   80,   80,   80,   80,   80,   80,   80,   80,   80,
       80,   80,   81,   81,   81,   81,   81,   81,   81,   81,
       82,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       84,   84,   84,   84,   85,   85,   86,   86,   86,   87,
       87,   87,   87,   87,   87,   88,   88,   89,   90,   90,
       90,   91,   91,   91,   91,   91,   92,   92,   92,   92,
       92,   92,   92,   92,   92,   92,   92,   92,   93,   94,
       94,   94,   94,   94,   95,   95,   95,   95,   95,   95,

       95,   96,   96,   96,   96,   96,   97,   97,   97,   97,
       97,   97,   97,   97,   98,   98,   99,   99,   99,   99,
      100,  100,  101,  101,  101,  101,  102,  102,  102,  102,
      102,  102,  103,  104,  104,  104,  104,  105,  105,  106,
      106,  107,  107,  107,  107,  108,  108,  108,  108,  109,
      109,  109,  109,  110,  111,  112,  112,  113,  114,  115,
      116,  117,  117,  117,  117,  118,  119,  119,  119,  120,
      120,  120,  120,  121,  121,  121,  121,  121,  121,  122,
      122,  122,  122,  122,  123,  124,  124,  125,  125,  125,
      125,  126,  126,  127,  127,  128,  128,  129,  130,  130,

      130,  131,  131,  132,  133,  133,  133,  133,  133,  134,
      134,  134,  134,  134,  134,  134,  134,  134,  135,  135,
      136,  136,  136,  137,  137,  137,  137,  138,  138,  139,
      140,  141,  141,  142,  142,  143,  143,  144,  145,  146,
      147,  147,  147,  148,  148,  148,  148,  148,  148,  149,
      149,  150,  150,  150,  151,  151,  151,  151,  151,  152,
      152,  153,  154,  155,  156,  157,  158,  158,  159,  160,
      160,  160,  161,  162,  163,  164,  165,  165,  166,  166,
      167,  168,  169,  170,  170,  170,  171,  171,  172,  173,
      173,  174,  175,  175,  175,  175,  176,  177,  178,  178,

      179,  179,  180,  180,  180,  180,  180,  180,  181,  181,
      181,  182,  183,  183,  184,  185,  186,  186
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    2,    2,    3,    4,
        2,    5,    5,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    3,    6,    7,    6,    8,    6,    6,    6,    9,
       10,    6,    6,    6,   11,    6,   12,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,    6,    6,    6,
        6,    6,    6,    6,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       14,   15,   16,    6,   13,    6,   17,   18,   19,   20,

       21,   22,   23,   24,   25,   26,   27,   28,   29,   30,
       31,   32,   13,   33,   34,   35,   36,   37,   38,   39,
       40,   13,   41,    6,   42,    6,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[43] =
    {   0,
        1,    2,    2,    2,    2,    3,    4,    3,    3,    3,
        3,    4,    3,    5,    2,    4,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        4,    4
    } ;

static const flex_int16_t yy_base[628] =
    {   0,
        0,   15,   29,   70,  918,  917,    7,   21,  924,  927,
      913,  107,  138,    0,  927,  919,  927,   41,  905,  906,
      927,  927,  927,  927,   35,   34,  909,  908,  172,  214,
      238,   23,   32,   30,  892,   51,   35,   41,   37,  885,
       63,  898,  881,  892,   68,  882,  894,   59,  877,    0,
      906,  119,  104,  894,  128,  873,  889,  884,   84,  862,
      276,  318,  893,  885,   43,  870,  878,  882,  865,  873,
      864,  862,  864,  872,  861,   69,  872,  856,  870,  856,
      859,  853,  850,  853,  101,   83,  858,   90,  105,  861,
      119,  116,  852,  849,  856,  861,  842,  848,  842,  849,

      839,  839,  846,  182,  867,  138,  831,  834,  845,  355,
      927,  832,  843,  845,  830,  153,  833,  830,  835,  838,
      841,  840,  839,  836,  825,   91,  818,  831,  820,  817,
      828,  117,  845,  829,  843,  824,  811,  812,  812,  809,
      806,  133,  804,  808,  807,  154,  127,  803,  814,  815,
       42,  803,  829,  806,  805,  794,  807,  802,  798,  822,
      808,  927,  820,  797,  800,  803,  392,  798,  801,  782,
      795,  799,  927,  793,  794,  784,  781,  770,  776,  781,
      780,  785,  788,  779,  184,  181,  783,  193,  196,  785,
      784,  797,  197,  776,  198,  199,  200,  777,  772,  775,

      774,  209,  771,  770,  124,  771,  758,  787,  754,  754,
      784,  747,  749,  219,  781,  748,  752,  762,  745,  762,
      757,  222,  742,  773,  739,  193,  738,  762,  755,  228,
      737,  222,  749,  749,  232,  728,  224,  234,  737,  731,
      735,  151,  217,  739,  747,  927,  740,  736,  757,  724,
      755,  722,  737,  720,  751,  718,  749,  748,  747,  746,
      713,  744,  711,  715,  721,  704,  709,  738,  705,  704,
      717,  720,  719,  702,  715,  730,  721,  699,  727,  697,
      710,  724,  691,  239,  702,  700,  720,  704,  718,  243,
      701,  716,  690,  701,  927,  688,  229,  696,  261,  682,

      697,  927,  257,  250,  709,  676,  251,  694,  927,  706,
      673,  672,  271,  670,   70,  680,  258,  671,  672,  677,
      679,  289,  697,  669,  667,  666,  672,  284,  664,  691,
      690,  661,  660,  670,  659,  285,  653,  656,  662,  287,
      650,  665,  649,  658,  646,  663,  294,  296,  648,  675,
      642,  297,  673,  672,  646,  670,  648,  636,  298,  635,
      638,  643,  643,  649,  306,  649,  927,  661,  628,  631,
      658,  625,  309,  628,  313,  655,  622,  635,  627,  621,
      618,  624,  618,  625,  646,  613,  614,  327,  643,  622,
      641,  640,  639,  638,  605,  636,  635,  634,  633,  323,

      632,  599,  622,  629,  324,  628,  595,  333,  608,  607,
      334,  596,  607,  622,  589,  620,  587,  618,  589,  616,
      583,  614,  595,  259,  599,  335,  330,  581,  578,  331,
      593,  345,  348,  580,  607,  578,  351,  605,  604,  590,
      927,  574,  356,  569,  600,  578,  566,  570,    6,  575,
      577,  366,  594,  593,  592,  563,  590,  589,  588,  587,
      586,  553,  556,  551,  582,  581,  548,  551,  578,  545,
      367,  370,  576,  543,  574,  555,  544,  543,  570,  569,
      540,  567,  553,  927,  927,  552,  927,  363,  543,  550,
      927,  544,  354,  561,  560,  559,  558,  379,  557,  543,

      927,  537,  554,  553,  534,  519,  528,  529,  548,  515,
      546,  517,  544,  515,  514,  541,  512,  539,  506,  537,
      504,  507,  534,  377,  533,  532,  531,  530,  529,  382,
      386,  515,  927,  393,  389,  395,  527,  526,  409,  525,
      412,  494,  523,  492,  521,  495,  519,  490,  517,  516,
      515,  514,  513,  512,  511,  482,  481,  508,  507,  488,
      505,  504,  503,  415,  418,  421,  489,  927,  424,  483,
      487,  927,  427,  432,  433,  499,  466,  497,  496,  495,
      494,  482,  479,  407,  392,  373,  337,  434,  437,  304,
      442,  321,  282,  280,  285,  301,  282,  281,  255,  445,

      242,  448,  213,  210,  190,  193,  162,  148,  118,  442,
       45,   24,    6,  927,  452,  456,  927,  461,  466,  471,
      474,  476,  480,  483,  486,  490,  492
    } ;

static const flex_int16_t yy_def[628] =
    {   0,
      618,  618,  619,  619,    4,    4,  620,  620,  617,  617,
      621,  622,  617,  623,  617,  617,  617,  624,  617,  617,
      617,  617,  617,  617,  617,  617,  621,  621,  622,  625,
      617,  617,  617,  617,  617,  617,  617,  617,  617,  617,
      617,  617,  617,  617,  617,  617,  617,  617,  617,  623,
      617,  624,  617,  617,  617,  617,  617,  617,  621,  626,
      625,  625,  621,  617,  617,  617,  617,  617,  617,  617,
      617,  617,  617,  617,  617,  617,  617,  617,  617,  617,
      617,  617,  617,  617,  617,  617,  617,  617,  617,  617,
      617,  617,  617,  617,  617,  617,  617,  617,  617,  617,

      617,  617,  617,  617,  617,  617,  617,  617,  617,  627,
      617,  617,  617,  617,  617,  617,  617,  617,  617,  617,
      617,  617,  617,  617,  617,  617,  617,  617,  617,  617,
      617,  617,  617,  617,  617,  617,  617,  617,  617,  617,
      617,  617,  617,  617,  617,  617,  617,  617,  617,  617,
      617,  617,  617,  617,  617,  617,  617,  617,  617,  617,
      617,  617,  617,  617,  617,  617,  627,  617,  617,  617,
      617,  617,  617,  617,  617,  617,  617,  617,  617,  617,
      617,  617,  617,  617,  617,  617,  617,  617,  617,  617,
      617,  617,  617,  617,  617,  617,  617,  617,  617,  617,

      617,  617,  617,  617,  617,  617,  617,  617,  617,  617,
      617,  617,  617,  617,  617,  617,  617,  617,  617,  617,
      617,  617,  617,  617,  617,  617,  617,  617,  617,  617,
      617,  617,  617,  617,  617,  617,  617,  617,  617,  617,
      617,  617,  617,  617,  617,  617,  617,  617,  617,  617,
      617,  617,  617,  617,  617,  617,  617,  617,  617,  617,
      617,  617,  617,  617,  617,  617,  617,  617,  617,  617,
      617,  617,  617,  617,  617,  617,  617,  617,  617,  617,
      617,  617,  617,  617,  617,  617,  617,  617,  617,  617,
      617,  617,  617,  617,  617,  617,  617,  617,  617,  617,

      617,  617,  617,  617,  617,  617,  617,  617,  617,  617,
      617,  617,  617,  617,  617,  617,  617,  617,  617,  617,
      617,  617,  617,  617,  617,  617,  617,  617,  617,  617,
      617,  617,  617,  617,  617,  617,  617,  617,  617,  617,
      617,  617,  617,  617,  617,  617,  617,  617,  617,  617,
      617,  617,  617,  617,  617,  617,  617,  617,  617,  617,
      617,  617,  617,  617,  617,  617,  617,  617,  617,  617,
      617,  617,  617,  617,  617,  617,  617,  617,  617,  617,
      617,  617,  617,  617,  617,  617,  617,  617,  617,  617,
      617,  617,  617,  617,  617,  617,  617,  617,  617,  617,

      617,  617,  617,  617,  617,  617,  617,  617,  617,  617,
      617,  617,  617,  617,  617,  617,  617,  617,  617,  617,
      617,  617,  617,  617,  617,  617,  617,  617,  617,  617,
      617,  617,  617,  617,  617,  617,  617,  617,  617,  617,
      617,  617,  617,  617,  617,  617,  617,  617,  617,  617,
      617,  617,  617,  617,  617,  617,  617,  617,  617,  617,
      617,  617,  617,  617,  617,  617,  617,  617,  617,  617,
      617,  617,  617,  617,  617,  617,  617,  617,  617,  617,
      617,  617,  617,  617,  617,  617,  617,  617,  617,  617,
      617,  617,  617,  617,  617,  617,  617,  617,  617,  617,

      617,  617,  617,  617,  617,  617,  617,  617,  617,  617,
      617,  617,  617,  617,  617,  617,  617,  617,  617,  617,
      617,  617,  617,  617,  617,  617,  617,  617,  617,  617,
      617,  617,  617,  617,  617,  617,  617,  617,  617,  617,
      617,  617,  617,  617,  617,  617,  617,  617,  617,  617,
      617,  617,  617,  617,  617,  617,  617,  617,  617,  617,
      617,  617,  617,  617,  617,  617,  617,  617,  617,  617,
      617,  617,  617,  617,  617,  617,  617,  617,  617,  617,
      617,  617,  617,  617,  617,  617,  617,  617,  617,  617,
      617,  617,  617,  617,  617,  617,  617,  617,  617,  617,

      617,  617,  617,  617,  617,  617,  617,  617,  617,  617,
      617,  617,  617,  617,  617,  617,    0,  617,  617,  617,
      617,  617,  617,  617,  617,  617,  617
    } ;

static const flex_int16_t yy_nxt[970] =
    {   0,
       10,   10,   10,   10,   10,  617,  617,   12,  449,   25,
       25,   25,  617,   13,   10,   10,   10,   10,   10,   10,
       26,  615,   12,   25,   25,   25,  612,  507,   13,   10,
       15,   16,   15,   15,   26,   17,   18,   55,   55,   55,
       19,   50,   20,   21,   22,   56,   50,  611,   50,   50,
       50,   50,   57,   58,   71,   72,   73,   75,   85,   81,
       76,   83,  212,  113,   74,   82,   86,  114,   84,   23,
       21,   15,   16,   15,   15,  213,   17,   18,   78,   88,
       79,   19,  103,   20,   21,   22,   96,   89,   97,   80,
       90,  110,  104,   28,  379,   91,   92,  125,  126,   98,

      380,  137,   99,  135,  138,  100,  106,  106,  106,  183,
       23,   21,   27,   27,   27,   27,   28,   27,   27,   50,
      612,  140,   27,  141,   50,  184,   50,   50,   50,   50,
       55,   55,   55,  136,  142,  145,  147,  190,  143,  146,
      106,  106,  106,  207,  272,  191,  148,   30,   27,   31,
      611,  273,  200,  242,   32,   33,   34,   35,   36,   37,
       38,  208,   39,   40,  172,   41,  201,   42,  173,   43,
       44,   45,  315,   46,   47,   48,   49,   27,   27,   27,
       59,   28,   27,   27,  160,  205,  242,   27,  316,  610,
      206,  244,  245,  161,  243,  249,  246,  162,  251,  255,

      258,  260,  262,  250,  294,  247,  252,  256,  295,  261,
      263,  268,   27,   27,   60,   60,   60,   60,   60,  269,
      609,  282,  608,   62,  290,  290,  290,  259,   60,  283,
      299,  299,  299,  301,  305,  308,  310,  302,  317,  309,
      608,  350,  306,  608,  311,  290,  290,  290,  318,  351,
      361,  319,  368,  371,  320,   63,   64,   65,  607,   66,
      369,  372,   67,  299,  299,  299,  362,   68,  366,   69,
      483,  606,  367,  376,  484,   70,   60,   60,   60,   60,
       60,  377,  382,  598,  597,   62,  394,  401,  383,  406,
       60,  388,  388,  388,  395,  402,  414,  407,  416,  420,

      426,  426,  426,  596,  415,  605,  417,  421,  432,  432,
      432,  437,  437,  437,  604,  439,  603,   63,   60,   60,
       60,   60,   60,  592,  440,  461,  466,   62,  441,  388,
      388,  388,   60,  462,  467,  469,  473,  426,  426,  426,
      601,  486,  490,  470,  474,  487,  491,  432,  432,  432,
      493,  493,  493,  437,  437,  437,  493,  493,  493,   63,
       27,   27,   27,   27,   28,   27,   27,  500,  509,  518,
       27,  501,  520,  599,  532,  586,  510,  519,  533,  559,
      521,  539,  539,  539,  564,  564,  564,  560,  565,  565,
      565,  569,  569,  569,  598,   27,   27,   27,   27,   27,

       27,   28,   27,   27,  567,  570,  571,   27,  568,  597,
      572,  539,  539,  539,  573,  573,  573,  564,  564,  564,
      565,  565,  565,  588,  588,  588,  569,  569,  569,  573,
      573,  573,   27,   27,  592,  592,  588,  588,  588,  600,
      600,  600,  593,  594,  602,  602,  602,  600,  600,  600,
      602,  602,  602,  613,  616,  616,  616,  614,  616,  616,
      616,   11,   11,   11,   11,   11,   14,   14,   14,   14,
       14,   24,   24,   24,   24,   24,   27,   27,   29,   29,
       50,  583,   50,   52,  582,   52,   61,   61,   61,   61,
       60,   60,   60,   60,  167,  167,  581,  580,  596,  578,

      595,  576,  591,  590,  589,  563,  562,  561,  587,  559,
      586,  585,  584,  583,  554,  582,  581,  551,  580,  549,
      579,  578,  577,  576,  575,  543,  574,  540,  538,  537,
      566,  529,  563,  527,  562,  561,  523,  558,  557,  520,
      556,  518,  555,  554,  553,  552,  551,  550,  549,  548,
      509,  547,  546,  545,  544,  543,  503,  542,  541,  540,
      497,  538,  495,  537,  536,  535,  534,  531,  530,  529,
      528,  527,  479,  526,  525,  524,  523,  522,  473,  517,
      469,  516,  515,  466,  465,  514,  513,  512,  461,  460,
      459,  458,  457,  511,  455,  454,  453,  508,  504,  506,

      505,  504,  503,  502,  499,  498,  439,  497,  496,  495,
      494,  492,  489,  488,  485,  482,  422,  481,  420,  480,
      479,  478,  416,  477,  414,  476,  475,  472,  471,  468,
      406,  465,  464,  463,  401,  460,  459,  458,  457,  456,
      394,  455,  454,  453,  452,  389,  451,  450,  449,  448,
      445,  447,  446,  445,  444,  443,  442,  376,  438,  436,
      371,  435,  434,  368,  433,  431,  430,  429,  428,  427,
      425,  424,  356,  423,  354,  422,  419,  350,  418,  413,
      412,  411,  410,  409,  408,  405,  404,  403,  400,  399,
      398,  397,  331,  330,  396,  393,  392,  391,  390,  389,

      387,  386,  385,  384,  381,  378,  375,  374,  310,  373,
      370,  305,  365,  364,  363,  360,  359,  358,  292,  357,
      356,  355,  354,  353,  352,  349,  282,  348,  347,  279,
      346,  345,  276,  344,  343,  342,  341,  340,  339,  338,
      268,  337,  336,  335,  334,  333,  262,  332,  260,  331,
      258,  330,  329,  255,  328,  327,  326,  251,  325,  249,
      324,  323,  322,  321,  314,  313,  312,  307,  304,  303,
      300,  298,  297,  296,  293,  292,  291,  289,  288,  287,
      286,  285,  284,  215,  281,  280,  279,  278,  277,  276,
      275,  274,  271,  270,  267,  266,  265,  264,  257,  192,

      254,  253,  248,  241,  240,  239,  238,  237,  236,  235,
      234,  233,  232,  231,  230,  229,  228,  227,  226,  225,
      224,  223,  163,  222,  160,  221,  220,  219,  218,  217,
      216,  215,  214,  211,  210,  209,  204,  203,  202,  199,
      198,  197,  196,  195,  194,  135,  193,  192,  189,  188,
      187,  186,  185,  182,  181,  180,  179,  178,  177,  176,
      175,  174,  171,  170,  169,  168,  166,  165,  164,  163,
      159,  158,  157,  156,  155,  154,  153,  152,  151,  150,
      149,  144,  139,  134,  133,  132,  131,  130,  129,  128,
      127,  124,  123,  122,  121,  120,  119,  118,  117,  116,

      115,  112,   28,  111,  109,  108,  107,   54,   51,  105,
      102,  101,   95,   94,   93,   87,   77,   28,   28,   54,
       53,   51,   28,  617,   14,   14,    9,  617,  617,  617,
      617,  617,  617,  617,  617,  617,  617,  617,  617,  617,
      617,  617,  617,  617,  617,  617,  617,  617,  617,  617,
      617,  617,  617,  617,  617,  617,  617,  617,  617,  617,
      617,  617,  617,  617,  617,  617,  617,  617,  617
    } ;

static const flex_int16_t yy_chk[970] =
    {   0,
        1,    1,    1,    1,    1,    0,    0,    1,  449,    7,
        7,    7,    0,    1,    1,    2,    2,    2,    2,    2,
        7,  613,    2,    8,    8,    8,  612,  449,    2,    2,
        3,    3,    3,    3,    8,    3,    3,   25,   25,   25,
        3,   18,    3,    3,    3,   26,   18,  611,   18,   18,
       18,   18,   26,   26,   32,   32,   33,   34,   39,   37,
       34,   38,  151,   65,   33,   37,   39,   65,   38,    3,
        3,    4,    4,    4,    4,  151,    4,    4,   36,   41,
       36,    4,   48,    4,    4,    4,   45,   41,   45,   36,
       41,   59,   48,   59,  315,   41,   41,   76,   76,   45,

      315,   86,   45,   85,   86,   45,   53,   53,   53,  126,
        4,    4,   12,   12,   12,   12,   12,   12,   12,   52,
      609,   88,   12,   88,   52,  126,   52,   52,   52,   52,
       55,   55,   55,   85,   89,   91,   92,  132,   89,   91,
      106,  106,  106,  147,  205,  132,   92,   12,   12,   13,
      608,  205,  142,  242,   13,   13,   13,   13,   13,   13,
       13,  147,   13,   13,  116,   13,  142,   13,  116,   13,
       13,   13,  242,   13,   13,   13,   13,   29,   29,   29,
       29,   29,   29,   29,  104,  146,  185,   29,  242,  607,
      146,  186,  186,  104,  185,  188,  186,  104,  189,  193,

      195,  196,  197,  188,  226,  186,  189,  193,  226,  196,
      197,  202,   29,   29,   30,   30,   30,   30,   30,  202,
      606,  214,  605,   30,  222,  222,  222,  195,   30,  214,
      230,  230,  230,  232,  235,  237,  238,  232,  243,  237,
      604,  284,  235,  603,  238,  290,  290,  290,  243,  284,
      297,  243,  304,  307,  243,   30,   31,   31,  601,   31,
      304,  307,   31,  299,  299,  299,  297,   31,  303,   31,
      424,  599,  303,  313,  424,   31,   61,   61,   61,   61,
       61,  313,  317,  598,  597,   61,  328,  336,  317,  340,
       61,  322,  322,  322,  328,  336,  347,  340,  348,  352,

      359,  359,  359,  596,  347,  595,  348,  352,  365,  365,
      365,  373,  373,  373,  594,  375,  593,   61,   62,   62,
       62,   62,   62,  592,  375,  400,  405,   62,  375,  388,
      388,  388,   62,  400,  405,  408,  411,  426,  426,  426,
      590,  427,  430,  408,  411,  427,  430,  432,  432,  432,
      433,  433,  433,  437,  437,  437,  493,  493,  493,   62,
      110,  110,  110,  110,  110,  110,  110,  443,  452,  471,
      110,  443,  472,  587,  488,  586,  452,  471,  488,  524,
      472,  498,  498,  498,  530,  530,  530,  524,  531,  531,
      531,  535,  535,  535,  585,  110,  110,  167,  167,  167,

      167,  167,  167,  167,  534,  536,  536,  167,  534,  584,
      536,  539,  539,  539,  541,  541,  541,  564,  564,  564,
      565,  565,  565,  566,  566,  566,  569,  569,  569,  573,
      573,  573,  167,  167,  574,  575,  588,  588,  588,  589,
      589,  589,  574,  575,  591,  591,  591,  600,  600,  600,
      602,  602,  602,  610,  615,  615,  615,  610,  616,  616,
      616,  618,  618,  618,  618,  618,  619,  619,  619,  619,
      619,  620,  620,  620,  620,  620,  621,  621,  622,  622,
      623,  583,  623,  624,  582,  624,  625,  625,  625,  625,
      626,  626,  626,  626,  627,  627,  581,  580,  579,  578,

      577,  576,  571,  570,  567,  563,  562,  561,  560,  559,
      558,  557,  556,  555,  554,  553,  552,  551,  550,  549,
      548,  547,  546,  545,  544,  543,  542,  540,  538,  537,
      532,  529,  528,  527,  526,  525,  523,  522,  521,  520,
      519,  518,  517,  516,  515,  514,  513,  512,  511,  510,
      509,  508,  507,  506,  505,  504,  503,  502,  500,  499,
      497,  496,  495,  494,  492,  490,  489,  486,  483,  482,
      481,  480,  479,  478,  477,  476,  475,  474,  473,  470,
      469,  468,  467,  466,  465,  464,  463,  462,  461,  460,
      459,  458,  457,  456,  455,  454,  453,  451,  450,  448,

      447,  446,  445,  444,  442,  440,  439,  438,  436,  435,
      434,  431,  429,  428,  425,  423,  422,  421,  420,  419,
      418,  417,  416,  415,  414,  413,  412,  410,  409,  407,
      406,  404,  403,  402,  401,  399,  398,  397,  396,  395,
      394,  393,  392,  391,  390,  389,  387,  386,  385,  384,
      383,  382,  381,  380,  379,  378,  377,  376,  374,  372,
      371,  370,  369,  368,  366,  364,  363,  362,  361,  360,
      358,  357,  356,  355,  354,  353,  351,  350,  349,  346,
      345,  344,  343,  342,  341,  339,  338,  337,  335,  334,
      333,  332,  331,  330,  329,  327,  326,  325,  324,  323,

      321,  320,  319,  318,  316,  314,  312,  311,  310,  308,
      306,  305,  301,  300,  298,  296,  294,  293,  292,  291,
      289,  288,  287,  286,  285,  283,  282,  281,  280,  279,
      278,  277,  276,  275,  274,  273,  272,  271,  270,  269,
      268,  267,  266,  265,  264,  263,  262,  261,  260,  259,
      258,  257,  256,  255,  254,  253,  252,  251,  250,  249,
      248,  247,  245,  244,  241,  240,  239,  236,  234,  233,
      231,  229,  228,  227,  225,  224,  223,  221,  220,  219,
      218,  217,  216,  215,  213,  212,  211,  210,  209,  208,
      207,  206,  204,  203,  201,  200,  199,  198,  194,  192,

      191,  190,  187,  184,  183,  182,  181,  180,  179,  178,
      177,  176,  175,  174,  172,  171,  170,  169,  168,  166,
      165,  164,  163,  161,  160,  159,  158,  157,  156,  155,
      154,  153,  152,  150,  149,  148,  145,  144,  143,  141,
      140,  139,  138,  137,  136,  135,  134,  133,  131,  130,
      129,  128,  127,  125,  124,  123,  122,  121,  120,  119,
      118,  117,  115,  114,  113,  112,  109,  108,  107,  105,
      103,  102,  101,  100,   99,   98,   97,   96,   95,   94,
       93,   90,   87,   84,   83,   82,   81,   80,   79,   78,
       77,   75,   74,   73,   72,   71,   70,   69,   68,   67,

       66,   64,   63,   60,   58,   57,   56,   54,   51,   49,
       47,   46,   44,   43,   42,   40,   35,   28,   27,   20,
       19,   16,   11,    9,    6,    5,  617,  617,  617,  617,
      617,  617,  617,  617,  617,  617,  617,  617,  617,  617,
      617,  617,  617,  617,  617,  617,  617,  617,  617,  617,
      617,  617,  617,  617,  617,  617,  617,  617,  617,  617,
      617,  617,  617,  617,  617,  617,  617,  617,  617
    } ;

extern int yy_flex_debug;
int yy_flex_debug = 1;

static const flex_int16_t yy_rule_linenum[115] =
    {   0,
       34,   39,   44,   49,   55,   61,   67,   72,   77,   82,
       86,   91,   96,  101,  106,  111,  116,  121,  125,  130,
      134,  139,  144,  149,  154,  158,  163,  168,  173,  178,
      183,  188,  193,  198,  203,  208,  213,  218,  223,  228,
      233,  238,  243,  248,  253,  258,  263,  268,  273,  278,
      283,  288,  293,  298,  302,  307,  312,  317,  322,  327,
      331,  336,  340,  345,  349,  354,  359,  364,  369,  374,
      379,  384,  389,  394,  399,  404,  409,  414,  419,  424,
      429,  434,  439,  444,  449,  454,  459,  464,  469,  474,
      479,  484,  489,  494,  499,  504,  508,  518,  523,  528,

      534,  539,  544,  549,  554,  559,  564,  570,  575,  581,
      591,  601,  608,  619
    } ;

static yy_state_type *yy_state_buf=0, *yy_state_ptr=0;
static char *yy_full_match;
static int yy_lp;
static int yy_looking_for_trail_begin = 0;
static int yy_full_lp;
static int *yy_full_state;
#define YY_TRAILING_MASK 0x2000
#define YY_TRAILING_HEAD_MASK 0x4000
#define REJECT \
{ \
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */ \
yy_cp = (yy_full_match); /* restore poss. backed-over text */ \
(yy_lp) = (yy_full_lp); /* restore orig. accepting pos. */ \
(yy_state_ptr) = (yy_full_state); /* restore orig. state */ \
yy_current_state = *(yy_state_ptr); /* restore curr. state */ \
++(yy_lp); \
goto find_rule; \
}

#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#ifndef YYLMAX
#define YYLMAX 8192
#endif

char yytext[YYLMAX];
char *yytext_ptr;
#line 1 "t3-lex.l"



#line 11 "t3-lex.l"
  /* stuff from t3-lex.l */
#include <math.h>
#include "y.tab.h"
#define BUFMAX 16000

int enter_case = 0;

char buf[BUFMAX] = {0};
char * buf_ptr = buf;

static int parse_stringdata();
static int parse_quoted_arg();
static int parse_curly_brased_arg();

#line 1016 "t3-lex.c"
#line 1017 "t3-lex.c"

#define INITIAL 0
#define ARGSTART 1
#define SWITCHARGSTART 2
#define CASESTART 3

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
/* %if-c-only */
#include <unistd.h>
/* %endif */
/* %if-c++-only */
/* %endif */
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* %if-c-only Reentrant structure and macros (non-C++). */
/* %if-reentrant */
/* %if-c-only */

static int yy_init_globals ( void );

/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif End reentrant structures and macros. */

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( void );

int yyget_debug ( void );

void yyset_debug ( int debug_flag  );

YY_EXTRA_TYPE yyget_extra ( void );

void yyset_extra ( YY_EXTRA_TYPE user_defined  );

FILE *yyget_in ( void );

void yyset_in  ( FILE * _in_str  );

FILE *yyget_out ( void );

void yyset_out  ( FILE * _out_str  );

			int yyget_leng ( void );

char *yyget_text ( void );

int yyget_lineno ( void );

void yyset_lineno ( int _line_number  );

/* %if-bison-bridge */
/* %endif */

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( void );
#else
extern int yywrap ( void );
#endif
#endif

/* %not-for-header */
#ifndef YY_NO_UNPUT
    
    static void yyunput ( int c, char *buf_ptr  );
    
#endif
/* %ok-for-header */

/* %endif */

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */
#ifdef __cplusplus
static int yyinput ( void );
#else
static int input ( void );
#endif
/* %ok-for-header */

/* %endif */
#endif

/* %if-c-only */

/* %endif */

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* %if-c-only Standard (non-C++) definition */
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
/* %endif */
/* %if-c++-only C++ definition */
/* %endif */
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
/* %% [5.0] fread()/read() definition of YY_INPUT goes here unless we're doing C++ \ */\
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\
/* %if-c++-only C++ definition \ */\
/* %endif */

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
/* %if-c-only */
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
/* %endif */
/* %if-c++-only */
/* %endif */
#endif

/* %if-tables-serialization structures and prototypes */
/* %not-for-header */
/* %ok-for-header */

/* %not-for-header */
/* %tables-yydmap generated elements */
/* %endif */
/* end tables serialization structures and prototypes */

/* %ok-for-header */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
/* %if-c-only Standard (non-C++) definition */

extern int yylex (void);

#define YY_DECL int yylex (void)
/* %endif */
/* %if-c++-only C++ definition */
/* %endif */
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

/* %% [6.0] YY_RULE_SETUP definition goes here */
#define YY_RULE_SETUP \
	YY_USER_ACTION

/* %not-for-header */
/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

        /* Create the reject buffer large enough to save one state per allowed character. */
        if ( ! (yy_state_buf) )
            (yy_state_buf) = (yy_state_type *)yyalloc(YY_STATE_BUF_SIZE  );
            if ( ! (yy_state_buf) )
                YY_FATAL_ERROR( "out of dynamic memory in yylex()" );

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
/* %if-c-only */
			yyin = stdin;
/* %endif */
/* %if-c++-only */
/* %endif */

		if ( ! yyout )
/* %if-c-only */
			yyout = stdout;
/* %endif */
/* %if-c++-only */
/* %endif */

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
/* %% [7.0] user's declarations go here */
#line 32 "t3-lex.l"


#line 1309 "t3-lex.c"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
/* %% [8.0] yymore()-related code goes here */
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

/* %% [9.0] code to set up and find next match goes here */
		yy_current_state = (yy_start);

		(yy_state_ptr) = (yy_state_buf);
		*(yy_state_ptr)++ = yy_current_state;

yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 618 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			*(yy_state_ptr)++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 927 );

yy_find_action:
/* %% [10.0] code to find the action number goes here */
		yy_current_state = *--(yy_state_ptr);
		(yy_lp) = yy_accept[yy_current_state];
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( (yy_lp) && (yy_lp) < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[(yy_lp)];
				if ( yy_act & YY_TRAILING_HEAD_MASK ||
				     (yy_looking_for_trail_begin) )
					{
					if ( yy_act == (yy_looking_for_trail_begin) )
						{
						(yy_looking_for_trail_begin) = 0;
						yy_act &= ~YY_TRAILING_HEAD_MASK;
						break;
						}
					}
				else if ( yy_act & YY_TRAILING_MASK )
					{
					(yy_looking_for_trail_begin) = yy_act & ~YY_TRAILING_MASK;
					(yy_looking_for_trail_begin) |= YY_TRAILING_HEAD_MASK;
					}
				else
					{
					(yy_full_match) = yy_cp;
					(yy_full_state) = (yy_state_ptr);
					(yy_full_lp) = (yy_lp);
					break;
					}
				++(yy_lp);
				goto find_rule;
				}
			--yy_cp;
			yy_current_state = *--(yy_state_ptr);
			(yy_lp) = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

/* %% [11.0] code for yylineno update goes here */

do_action:	/* This label is used only to access EOF actions. */

/* %% [12.0] debug code goes here */
		if ( yy_flex_debug )
			{
			if ( yy_act == 0 )
				fprintf( stderr, "--scanner backing up\n" );
			else if ( yy_act < 115 )
				fprintf( stderr, "--accepting rule at line %ld (\"%s\")\n",
				         (long)yy_rule_linenum[yy_act], yytext );
			else if ( yy_act == 115 )
				fprintf( stderr, "--accepting default rule (\"%s\")\n",
				         yytext );
			else if ( yy_act == 116 )
				fprintf( stderr, "--(end of buffer or a NUL)\n" );
			else
				fprintf( stderr, "--EOF (start condition %d)\n", YY_START );
			}

		switch ( yy_act )
	{ /* beginning of action switch */
/* %% [13.0] actions go here */
case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 34 "t3-lex.l"
{
  yylval.str = "";
  return(ELSE);
}
	YY_BREAK
case 2:
/* rule 2 can match eol */
YY_RULE_SETUP
#line 39 "t3-lex.l"
{
  yylval.str = "";
  /* do nothing */
}
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 44 "t3-lex.l"
{
  yylval.str = "";
  /* do nothing */
}
	YY_BREAK
case 4:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 8;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 49 "t3-lex.l"
{
  yylval.str = "";
  BEGIN(ARGSTART);
  return(COMMENT);
}
	YY_BREAK
case 5:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 55 "t3-lex.l"
{
  yylval.str = "";
  BEGIN(ARGSTART);
  return(WS);
}
	YY_BREAK
case 6:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 7;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 61 "t3-lex.l"
{
  yylval.str = "";
  BEGIN(ARGSTART);
  return(ELSEIF);
}
	YY_BREAK
case 7:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 67 "t3-lex.l"
{
  BEGIN(ARGSTART);
  return(IFBEGIN);
}
	YY_BREAK
case 8:
/* rule 8 can match eol */
YY_RULE_SETUP
#line 72 "t3-lex.l"
{
  
  return(BREAK);
}
	YY_BREAK
case 9:
/* rule 9 can match eol */
YY_RULE_SETUP
#line 77 "t3-lex.l"
{
  
  return(CONTINUE);
}
	YY_BREAK
case 10:
/* rule 10 can match eol */
YY_RULE_SETUP
#line 82 "t3-lex.l"
{
  return(IFEND);
}
	YY_BREAK
case 11:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 86 "t3-lex.l"
{
  BEGIN(ARGSTART);
  return(INCR);
}
	YY_BREAK
case 12:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 91 "t3-lex.l"
{
  BEGIN(ARGSTART);
  return(INCRN);
}
	YY_BREAK
case 13:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 96 "t3-lex.l"
{
   BEGIN(ARGSTART);
   return(EXPR);
}
	YY_BREAK
case 14:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 8;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 101 "t3-lex.l"
{
   BEGIN(ARGSTART);
   return(EXPRTO);
}
	YY_BREAK
case 15:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 8;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 106 "t3-lex.l"
{
  BEGIN(ARGSTART);
  return(FOREACHBEGIN);
}
	YY_BREAK
case 16:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 7;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 111 "t3-lex.l"
{
   BEGIN(ARGSTART);
   return(FORMAT);
}
	YY_BREAK
case 17:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 10;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 116 "t3-lex.l"
{
   BEGIN(ARGSTART);
   return(FORMATTO);
}
	YY_BREAK
case 18:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 7;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 121 "t3-lex.l"
{
   BEGIN(ARGSTART);
   return(REGEXP);
}
	YY_BREAK
case 19:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 10;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 125 "t3-lex.l"
{
   BEGIN(ARGSTART);
   return(REGEXPTO);
}
	YY_BREAK
case 20:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 130 "t3-lex.l"
{
   BEGIN(ARGSTART);
   return(IFREG);
}
	YY_BREAK
case 21:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 11;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 134 "t3-lex.l"
{
   BEGIN(ARGSTART);
   return(ELSEIFREG);
}
	YY_BREAK
case 22:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 7;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 139 "t3-lex.l"
{
   BEGIN(ARGSTART);
   return(REGSUB);
}
	YY_BREAK
case 23:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 10;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 144 "t3-lex.l"
{
   BEGIN(ARGSTART);
   return(REGSUBTO);
}
	YY_BREAK
case 24:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 149 "t3-lex.l"
{
   BEGIN(ARGSTART);
   return(XRESOURCE);
}
	YY_BREAK
case 25:
/* rule 25 can match eol */
YY_RULE_SETUP
#line 154 "t3-lex.l"
{
  return(FOREACHENDCMD);
}
	YY_BREAK
case 26:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 8;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 158 "t3-lex.l"
{
  BEGIN(ARGSTART);
  return(LAPPEND);
}
	YY_BREAK
case 27:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 9;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 163 "t3-lex.l"
{
  BEGIN(ARGSTART);
  return(LSORTTO);
}
	YY_BREAK
case 28:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 8;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 168 "t3-lex.l"
{
  BEGIN(ARGSTART);
  return(LASSIGN);
}
	YY_BREAK
case 29:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 11;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 173 "t3-lex.l"
{
  BEGIN(ARGSTART);
  return(LASSIGNTO);
}
	YY_BREAK
case 30:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 7;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 178 "t3-lex.l"
{
  BEGIN(ARGSTART);
  return(LINDEX);
}
	YY_BREAK
case 31:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 10;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 183 "t3-lex.l"
{
  BEGIN(ARGSTART);
  return(LINDEXTO);
}
	YY_BREAK
case 32:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 11;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 188 "t3-lex.l"
{
  BEGIN(ARGSTART);
  return(LINSERTTO);
}
	YY_BREAK
case 33:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 193 "t3-lex.l"
{
  BEGIN(ARGSTART);
  return(LIST);
}
	YY_BREAK
case 34:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 8;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 198 "t3-lex.l"
{
  BEGIN(ARGSTART);
  return(LISTTO);
}
	YY_BREAK
case 35:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 8;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 203 "t3-lex.l"
{
  BEGIN(ARGSTART);
  return(LLENGTH);
}
	YY_BREAK
case 36:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 11;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 208 "t3-lex.l"
{
  BEGIN(ARGSTART);
  return(LLENGTHTO);
}
	YY_BREAK
case 37:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 7;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 213 "t3-lex.l"
{
  BEGIN(ARGSTART);
  return(LRANGE);
}
	YY_BREAK
case 38:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 10;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 218 "t3-lex.l"
{
  BEGIN(ARGSTART);
  return(LRANGETO);
}
	YY_BREAK
case 39:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 8;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 223 "t3-lex.l"
{
  BEGIN(ARGSTART);
  return(LREPEAT);
}
	YY_BREAK
case 40:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 11;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 228 "t3-lex.l"
{
  BEGIN(ARGSTART);
  return(LREPEATTO);
}
	YY_BREAK
case 41:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 9;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 233 "t3-lex.l"
{
  BEGIN(ARGSTART);
  return(LREPLACE);
}
	YY_BREAK
case 42:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 12;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 238 "t3-lex.l"
{
  BEGIN(ARGSTART);
  return(LREPLACETO);
}
	YY_BREAK
case 43:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 12;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 243 "t3-lex.l"
{
  BEGIN(ARGSTART);
  return(LREVERSETO);
}
	YY_BREAK
case 44:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 9;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 248 "t3-lex.l"
{
  BEGIN(ARGSTART);
  return(LREVERSE);
}
	YY_BREAK
case 45:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 11;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 253 "t3-lex.l"
{
  BEGIN(ARGSTART);
  return(LSEARCHTO);
}
	YY_BREAK
case 46:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 8;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 258 "t3-lex.l"
{
  BEGIN(ARGSTART);
  return(LSEARCH);
}
	YY_BREAK
case 47:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 263 "t3-lex.l"
{
  BEGIN(ARGSTART);
  return(LSET);
}
	YY_BREAK
case 48:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 8;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 268 "t3-lex.l"
{
  BEGIN(ARGSTART);
  return(DICTTO);
}
	YY_BREAK
case 49:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 273 "t3-lex.l"
{
  BEGIN(ARGSTART);
  return(DICT);
}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 278 "t3-lex.l"
{
  BEGIN(ARGSTART);
  return(DICTFILTER);
}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 283 "t3-lex.l"
{
  BEGIN(ARGSTART);
  return(DICTFILTERTO);
}
	YY_BREAK
case 52:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 11;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 288 "t3-lex.l"
{
  BEGIN(ARGSTART);
  return(DICTPRINT);
}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 293 "t3-lex.l"
{
  BEGIN(ARGSTART);
  return(DICTFORBEGIN);
}
	YY_BREAK
case 54:
/* rule 54 can match eol */
YY_RULE_SETUP
#line 298 "t3-lex.l"
{
  return(DICTFOREND);
}
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 302 "t3-lex.l"
{
  BEGIN(ARGSTART);
  return(DICTWITHBEGIN);
}
	YY_BREAK
case 56:
/* rule 56 can match eol */
YY_RULE_SETUP
#line 307 "t3-lex.l"
{
  return(DICTWITHEND);
}
	YY_BREAK
case 57:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 312 "t3-lex.l"
{
  BEGIN(ARGSTART);
  return(SCAN);
}
	YY_BREAK
case 58:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 8;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 317 "t3-lex.l"
{
  BEGIN(ARGSTART);
  return(SCANTO);
}
	YY_BREAK
case 59:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 15;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 322 "t3-lex.l"
{
  BEGIN(ARGSTART);
  return(NSEVALBEGIN);
}
	YY_BREAK
case 60:
/* rule 60 can match eol */
YY_RULE_SETUP
#line 327 "t3-lex.l"
{
  return(NSEVALEND);
}
	YY_BREAK
case 61:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 10;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 331 "t3-lex.l"
{
  BEGIN(ARGSTART);
  return(NSBEGIN);
}
	YY_BREAK
case 62:
/* rule 62 can match eol */
YY_RULE_SETUP
#line 336 "t3-lex.l"
{
  return(NSEND);
}
	YY_BREAK
case 63:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 340 "t3-lex.l"
{
  BEGIN(ARGSTART);
  return(PROCBEGIN);
}
	YY_BREAK
case 64:
/* rule 64 can match eol */
YY_RULE_SETUP
#line 345 "t3-lex.l"
{
  return(PROCEND);
}
	YY_BREAK
case 65:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 9;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 349 "t3-lex.l"
{
  BEGIN(ARGSTART);
  return(VARIABLE);
}
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 354 "t3-lex.l"
{
  BEGIN(ARGSTART);
  return(SET);
}
	YY_BREAK
case 67:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 359 "t3-lex.l"
{
  BEGIN(ARGSTART);
  return(GET);
}
	YY_BREAK
case 68:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 7;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 364 "t3-lex.l"
{
  BEGIN(ARGSTART);
  return(STRING);
}
	YY_BREAK
case 69:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 10;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 369 "t3-lex.l"
{
  BEGIN(ARGSTART);
  return(STRINGTO);
}
	YY_BREAK
case 70:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 374 "t3-lex.l"
{
  BEGIN(ARGSTART);
  return(SPLIT);
}
	YY_BREAK
case 71:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 9;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 379 "t3-lex.l"
{
  BEGIN(ARGSTART);
  return(SPLITTO);
}
	YY_BREAK
case 72:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 9;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 384 "t3-lex.l"
{
  BEGIN(ARGSTART);
  return(ENCODING);
}
	YY_BREAK
case 73:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 12;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 389 "t3-lex.l"
{
  BEGIN(ARGSTART);
  return(ENCODINGTO);
}
	YY_BREAK
case 74:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 394 "t3-lex.l"
{
  BEGIN(ARGSTART);
  return(CLOCK);
}
	YY_BREAK
case 75:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 9;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 399 "t3-lex.l"
{
  BEGIN(ARGSTART);
  return(CLOCKTO);
}
	YY_BREAK
case 76:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 404 "t3-lex.l"
{
  BEGIN(ARGSTART);
  return(INFO);
}
	YY_BREAK
case 77:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 8;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 409 "t3-lex.l"
{
  BEGIN(ARGSTART);
  return(INFOTO);
}
	YY_BREAK
case 78:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 414 "t3-lex.l"
{
  BEGIN(ARGSTART);
  return(ARRAY);
}
	YY_BREAK
case 79:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 9;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 419 "t3-lex.l"
{
  BEGIN(ARGSTART);
  return(ARRAYTO);
}
	YY_BREAK
case 80:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 7;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 424 "t3-lex.l"
{
  BEGIN(ARGSTART);
  return(CONCAT);
}
	YY_BREAK
case 81:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 10;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 429 "t3-lex.l"
{
  BEGIN(ARGSTART);
  return(CONCATTO);
}
	YY_BREAK
case 82:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 434 "t3-lex.l"
{
  BEGIN(ARGSTART);
  return(JOIN);
}
	YY_BREAK
case 83:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 8;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 439 "t3-lex.l"
{
  BEGIN(ARGSTART);
  return(JOINTO);
}
	YY_BREAK
case 84:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 7;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 444 "t3-lex.l"
{
  BEGIN(ARGSTART);
  return(APPEND);
}
	YY_BREAK
case 85:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 10;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 449 "t3-lex.l"
{
  BEGIN(ARGSTART);
  return(APPENDTO);
}
	YY_BREAK
case 86:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 7;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 454 "t3-lex.l"
{
  BEGIN(ARGSTART);
  return(BINARY);
}
	YY_BREAK
case 87:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 10;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 459 "t3-lex.l"
{
  BEGIN(ARGSTART);
  return(BINARYTO);
}
	YY_BREAK
case 88:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 464 "t3-lex.l"
{
  BEGIN(ARGSTART);
  return(GLOB);
}
	YY_BREAK
case 89:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 8;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 469 "t3-lex.l"
{
  BEGIN(ARGSTART);
  return(GLOBTO);
}
	YY_BREAK
case 90:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 474 "t3-lex.l"
{
  BEGIN(ARGSTART);
  return(FILEX);
}
	YY_BREAK
case 91:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 8;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 479 "t3-lex.l"
{
  BEGIN(ARGSTART);
  return(FILEXTO);
}
	YY_BREAK
case 92:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 484 "t3-lex.l"
{
  BEGIN(ARGSTART);
  return(UNSET);
}
	YY_BREAK
case 93:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 7;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 489 "t3-lex.l"
{
  BEGIN(SWITCHARGSTART);
  return(SWITCHBEGIN);
}
	YY_BREAK
case 94:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 494 "t3-lex.l"
{
  BEGIN(ARGSTART);
  return(CASEBEGIN);
}
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 499 "t3-lex.l"
{
  BEGIN(INITIAL);
  return(DEFAULTCASEBEGIN);
}
	YY_BREAK
case 96:
/* rule 96 can match eol */
YY_RULE_SETUP
#line 504 "t3-lex.l"
{
  /* do nothing whitespace allowed between case/switch tags */
}
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 508 "t3-lex.l"
{
  /* error */
  yy_state_type previous_state = yy_get_previous_state();
  printf ( " => BAD TEXT IN SWITCH/CASE: Error! '%s' PREVIOUS STATE = '%i'\n",
        yytext,
       (int)previous_state );
  yylval.str = "ERROR: BAD TEXT IN SWITCH/CASE";
  return(BADTEXTINSWITCH);
}
	YY_BREAK
case 98:
/* rule 98 can match eol */
YY_RULE_SETUP
#line 518 "t3-lex.l"
{
  BEGIN(INITIAL);
  return(SWITCHEND);
}
	YY_BREAK
case 99:
/* rule 99 can match eol */
YY_RULE_SETUP
#line 523 "t3-lex.l"
{
  BEGIN(CASESTART);
  return(CASEEND);
}
	YY_BREAK
case 100:
/* rule 100 can match eol */
YY_RULE_SETUP
#line 528 "t3-lex.l"
{
  BEGIN(CASESTART);
  return(CASEEND);
}
	YY_BREAK
case 101:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 534 "t3-lex.l"
{
  BEGIN(ARGSTART);
  return(WHILEBEGIN);
}
	YY_BREAK
case 102:
/* rule 102 can match eol */
YY_RULE_SETUP
#line 539 "t3-lex.l"
{
  BEGIN(INITIAL);
  return(WHILEEND);
}
	YY_BREAK
case 103:
/* rule 103 can match eol */
YY_RULE_SETUP
#line 544 "t3-lex.l"
{
    yylval.str = yytext;
    return(VAR);
}
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 549 "t3-lex.l"
{
    yylval.str = yytext;
    return(VAR);
}
	YY_BREAK
case 105:
/* rule 105 can match eol */
YY_RULE_SETUP
#line 554 "t3-lex.l"
{
    yylval.str = yytext;
    return(VAR);
}
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 559 "t3-lex.l"
{ 
  yylval.str = "";
  /* do nothing else */ 
}
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 564 "t3-lex.l"
{ 
  yylval.str = "ERROR: OPEN BRACKET IN ARGS";
  /* do nothing else, let bison exit */ 
  return(BADWSINARG);
}
	YY_BREAK
case 108:
/* rule 108 can match eol */
YY_RULE_SETUP
#line 570 "t3-lex.l"
{
  yylval.str = "ERROR: BAD WHITESPACE";
  return(BADWSINARG);
}
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 575 "t3-lex.l"
{
  yylval.str = yytext;
  /* printf ( "   ARG: Naked arg '%s'\n", yytext); */
  return(ARG);
}
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 581 "t3-lex.l"
{
  unput('"');
  int len = parse_quoted_arg();
  if (len >= 2) {
      yylval.str = buf;
      /* printf("len = %i, yytext = '%s' ", len, buf); */
  }
  return(ARG);
}
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 591 "t3-lex.l"
{
  unput('\{');
  int len = parse_curly_brased_arg();
  if (len >= 2) {
      yylval.str = buf;
      /* printf("len = %i, yytext = '%s' ", len, buf); */
  }
  return(ARG);
}
	YY_BREAK
case 112:
/* rule 112 can match eol */
YY_RULE_SETUP
#line 601 "t3-lex.l"
{
  /* printf( "      CLOSETAG: Eat Whitespace... ']' yytext = '%s'\n", yytext ); */
  yylval.str = '\0';
  BEGIN(INITIAL);
  return(CLOSETAG);
}
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 608 "t3-lex.l"
{ 
  /* printf( "      CLOSETAG: Finished args... '/]' yytext = '%s'\n", yytext ); */
  yylval.str = '\0';
  if (YYSTATE == ARGSTART) {
      BEGIN(INITIAL);
  } else {
      BEGIN(CASESTART);
  }
  return(CLOSETAG);
}
	YY_BREAK
case 114:
/* rule 114 can match eol */
YY_RULE_SETUP
#line 619 "t3-lex.l"
{
  unput(yytext[0]);
  /* printf( "Starting to parse_stringdata()"); */
  int len = parse_stringdata();
  yylval.str = buf;
  return(STRINGDATA);
}
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 627 "t3-lex.l"
ECHO;
	YY_BREAK
#line 2607 "t3-lex.c"
			case YY_STATE_EOF(INITIAL):
			case YY_STATE_EOF(ARGSTART):
			case YY_STATE_EOF(SWITCHARGSTART):
			case YY_STATE_EOF(CASESTART):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
/* %if-c-only */
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
/* %endif */
/* %if-c++-only */
/* %endif */
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
/* %% [14.0] code to do back-up for compressed tables and set up yy_cp goes here */
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */
/* %ok-for-header */

/* %if-c++-only */
/* %not-for-header */
/* %ok-for-header */

/* %endif */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
/* %if-c-only */
static int yy_get_next_buffer (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

/* %if-c-only */
/* %not-for-header */
    static yy_state_type yy_get_previous_state (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
/* %% [15.0] code to get the start state into yy_current_state goes here */
	yy_current_state = (yy_start);

	(yy_state_ptr) = (yy_state_buf);
	*(yy_state_ptr)++ = yy_current_state;

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
/* %% [16.0] code to find the next state goes here */
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 618 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		*(yy_state_ptr)++ = yy_current_state;
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
/* %if-c-only */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
/* %endif */
/* %if-c++-only */
/* %endif */
{
	int yy_is_jam;
    /* %% [17.0] code to find the next state, and perhaps do backing up, goes here */

	YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 618 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 617);
	if ( ! yy_is_jam )
		*(yy_state_ptr)++ = yy_current_state;

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT
/* %if-c-only */

    static void yyunput (int c, char * yy_bp )
/* %endif */
/* %if-c++-only */
/* %endif */
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

/* %% [18.0] update yylineno here */

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}
/* %if-c-only */

/* %endif */
#endif

/* %if-c-only */
#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

/* %endif */
/* %if-c++-only */
/* %endif */
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

/* %% [19.0] update BOL and yylineno */

	return c;
}
/* %if-c-only */
#endif	/* ifndef YY_NO_INPUT */
/* %endif */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
/* %if-c-only */
    void yyrestart  (FILE * input_file )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/* %if-c++-only */
/* %endif */

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
/* %if-c-only */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

/* %if-c-only */
static void yy_load_buffer_state  (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
/* %if-c-only */
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
/* %endif */
/* %if-c++-only */
/* %endif */
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
/* %if-c-only */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
/* %endif */
/* %if-c++-only */
/* %endif */
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/* %if-c++-only */
/* %endif */

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
/* %if-c-only */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
/* %if-c-only */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )
/* %endif */
/* %if-c++-only */
/* %endif */

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

/* %if-c-only */
	b->yy_input_file = file;
/* %endif */
/* %if-c++-only */
/* %endif */
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

/* %if-c-only */

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
/* %endif */
/* %if-c++-only */
/* %endif */
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
/* %if-c-only */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/* %if-c-or-c++ */
/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
/* %if-c-only */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}
/* %endif */

/* %if-c-or-c++ */
/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
/* %if-c-only */
void yypop_buffer_state (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}
/* %endif */

/* %if-c-or-c++ */
/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
/* %if-c-only */
static void yyensure_buffer_stack (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b  );

	return b;
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr )
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) );
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}
/* %endif */

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

/* %if-c-only */
static void yynoreturn yy_fatal_error (const char* msg )
{
			fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}
/* %endif */
/* %if-c++-only */
/* %endif */

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/* %if-c-only */
/* %if-reentrant */
/* %endif */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
    
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/* %if-reentrant */
/* %endif */

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void yyset_lineno (int  _line_number )
{
    
    yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str )
{
        yyin = _in_str ;
}

void yyset_out (FILE *  _out_str )
{
        yyout = _out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  _bdebug )
{
        yy_flex_debug = _bdebug ;
}

/* %endif */

/* %if-reentrant */
/* %if-bison-bridge */
/* %endif */
/* %endif if-c-only */

/* %if-c-only */
static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = NULL;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = NULL;
    (yy_init) = 0;
    (yy_start) = 0;

    (yy_state_buf) = 0;
    (yy_state_ptr) = 0;
    (yy_full_match) = 0;
    (yy_lp) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}
/* %endif */

/* %if-c-only SNIP! this currently causes conflicts with the c++ scanner */
/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    yyfree ( (yy_state_buf) );
    (yy_state_buf)  = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

/* %if-reentrant */
/* %endif */
    return 0;
}
/* %endif */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

/* %if-tables-serialization definitions */
/* %define-yytables   The name for this specific scanner's tables. */
#define YYTABLES_NAME "yytables"
/* %endif */

/* %ok-for-header */

#line 627 "t3-lex.l"


/*
 functions used in this file
*/
static int parse_stringdata() {

  int i = 0;
  int level = 1;
  char c;
  char ctmp;

  while ( (i < BUFMAX) && ( (c = input()) != EOF )   )
  {
    
    switch (c) 
    {
    case '\{' :
    case '"':
      /* things which need escaping */
      /* printf("...Escaping '%c'\n", c); */
      buf[i] = '\\';
      i++;
      buf[i] = c;
      i++;
      break;
    case '\\':
      
      /* must step over backslash plus following char */
      
      ctmp = input();
      buf[i] = '\\';
      i++;
      buf[i] = ctmp;
      i++;
      break;
    case '\[':
    case '$':
      if (i == 0) {
       /* pattern doesn't match existing 
        * variable or command
        */
       buf[i] = '\\';
       i++;
       buf[i] = c;
       i++;
       break;
      }
      /* end of the line, all strings end with closing double quote */
      unput(c);
      /* printf("End of string with '%c'\n", c); */
      buf[i] = '\0';
      return (i);
    default:
      /*printf("buffing '%c' at buf[%i]\n", c, i); */
      buf[i] = c;
      i++;
      break;
    }   /* end switch */
    
  }    /* end while */

  /* all strings end with closing double quote */
  /*printf("ran out of data, cleaning up\n"); */
  buf[i] = '\0';
  return (i);
}


static int parse_curly_brased_arg() {

  int i = 0;
  int level = 1;
  char c;
  char ctmp;
  
  
  if ( (c = input()) != '\{' )
    return i;
  else
    buf[i] = '\{';
  
  while ( (c = input()) != EOF  && (i < BUFMAX) )
  {
      
    i++;
      
    switch (c) 
    {
    case '\{' :
      
      level++;
      buf[i] = c;
      break;
      
    case '}' :
      
      level--;
      buf[i] = '}';
      
      if (level == 0) 
	{
	  
	  c = input();
	  
	  if (c == ']' || c == ' ' || c == '\t') {
	    i++;
	    buf[i] = '\0';
	    unput(c);
	    /* printf("buf = '%s'", buf); */
	    return i;
	  } else if (c == '/') {
	    
	    ctmp = input();
	    
	    if (ctmp == ']') {
	      i++;
	      buf[i] = '\0';
	      unput(ctmp);
	      unput(c);
	      return i;
	      /* printf("buf = '%s'", buf); */
	    } else {
	      unput(ctmp);
	      unput(c);
	      return 0;
	    }
	    
	  } else {
	    /* illegal char following braced string */
	    /* printf("illegal char following braced string, '%c'\n", c); */
	    unput(c);
	    return 0;
	  }
	}
      break;
      
    case '\\':
      
      /* must step over backslash plus following char */
      
      ctmp = input();
      buf[i] = '\\';
      i++;
      buf[i] = ctmp;
      break;
      
    case '\[':
      
      /* must escape bracket char */
      
      buf[i] = '\\';
      i++;
      buf[i] = c;
      
      break;
    default:
      
      buf[i] = c;
      break;
      
    }   /* end switch */
    
  }    /* end while */
}


static int parse_quoted_arg() {

   int i = 0;
   char c;
   char ctmp;

   if ( (c = input()) != '\"' ) {
      return i;
   } else {
      buf[i] = '\"';
   }

   while ( (c = input()) != EOF && (i < BUFMAX) ) {

      i++;

      switch (c) {
      case '\"' :
         /* printf("in case '\"' at i = '%i'\n", i);
            printf("buf = '%s'\n", buf); */
         buf[i] = '\"';

         c = input();

         if (c == ']' || c == ' ' || c == '\t') {
             i++;
             buf[i] = '\0';
             unput(c);
             /* printf("buf = '%s'", buf); */
             return i;
         } else if (c == '/') {

             ctmp = input();

             if (ctmp == ']') {
                i++;
                buf[i] = '\0';
                unput(ctmp);
                unput(c);
                return i;
                /* printf("buf = '%s'", buf); */
             } else {
                unput(ctmp);
                unput(c);
                return 0;
             }

         } else {
             /* illegal char following quoted string */
             /* printf("illegal char following quoted string, '%c'\n", c); */
             unput(c);
             return 0;
         }
         break;

      case '\\':

         /* must step over backslash plus following char */

         ctmp = input();

         buf[i] = '\\';
         i++;
         buf[i] = ctmp;

         break;

      case '[':

         /* must escape bracket char */
         buf[i] = '\\';
         i++;
         buf[i] = c;

         break;
      default:

         /* printf("appending %c to buf\n", c); */
         buf[i] = c;
         break;
      }

      /* printf("i = %i, buf[%i] = %c\n", i, i, buf[i]); */
   }
   return 0;
}









